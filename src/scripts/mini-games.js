// –ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ
function firstGame() {
    function guessNumberGame() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
        const secretNumber = Math.floor(Math.random() * 100) + 1;
        let attempts = 0;
        let userGuess;

        alert('–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!');

        do {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ
            userGuess = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–≥–∞–¥–∫—É (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100):');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π—Ç–∏ (–Ω–∞–∂–∞–ª Cancel)
            if (userGuess === null) {
                alert(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: ${secretNumber}`);
                return;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            userGuess = Number(userGuess);

            if (isNaN(userGuess)) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!');
                continue;
            }

            if (userGuess < 1 || userGuess > 100) {
                alert('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100!');
                continue;
            }

            attempts++;

            // –î–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            if (userGuess < secretNumber) {
                alert('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!');
            } else if (userGuess > secretNumber) {
                alert('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!');
            }

        } while (userGuess !== secretNumber);

        // –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π
        alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${secretNumber} –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
    }

    guessNumberGame();
}

// –ò–≥—Ä–∞ –ü—Ä–æ—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
function secondGame() {
    function generateMathProblem() {
        const operations = ['+', '-', '*', '/'];
        const operation = operations[Math.floor(Math.random() * operations.length)];

        let num1, num2, answer;

        if (operation === '+') {
            num1 = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 10) + 1;
            answer = num1 + num2;
        } else if (operation === '-') {
            num1 = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 10) + 1;
            answer = num1 - num2;
        } else if (operation === '*') {
            num1 = Math.floor(Math.random() * 10) + 1;
            num2 = Math.floor(Math.random() * 5) + 1;
            answer = num1 * num2;
        } else if (operation === '/') {
            num2 = Math.floor(Math.random() * 10) + 1;
            answer = Math.floor(Math.random() * 10) + 1;
            num1 = num2 * answer;
        }

        return {
            question: `–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç ${num1} ${operation} ${num2}?`,
            correctAnswer: answer
        };
    }

    function startMathQuiz() {
        const problem = generateMathProblem();
        const userAnswer = parseFloat(prompt(problem.question + "\n(–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç)"));

        if (isNaN(userAnswer)) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
        } else if (Math.abs(userAnswer - problem.correctAnswer) < 0.0001) {
            alert("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç");
        } else {
            alert(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${problem.correctAnswer}`);
        }

        if (confirm("–•–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É?")) {
            startMathQuiz();
        } else {
            alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!");
        }
    }

// –ø–æ–µ—Ö–∞–ª–∏!!!
    startMathQuiz();
}

// –ò–≥—Ä–∞ ¬´–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç¬ª
function thirdGame() {
    const userGuess = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è');
    const turnText = userGuess.split('').reverse().join('');
    alert(`–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å: ${turnText}`);
}

// –ò–≥—Ä–∞ ¬´–í–∏–∫—Ç–æ—Ä–∏–Ω–∞¬ª
function fourthGame() {
    const jobArray
        = [
        {
            question: "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –Ω–µ–±–æ?",
            options: ["1. –ö—Ä–∞—Å–Ω—ã–π", "2. –°–∏–Ω–∏–π", "3. –ó–µ–ª–µ–Ω—ã–π"],
            correctAnswer: 2 // –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ?",
            options: ["1. –®–µ—Å—Ç—å", "2. –°–µ–º—å", "3. –í–æ—Å–µ–º—å"],
            correctAnswer: 2
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ?",
            options: ["1. –ß–µ—Ç—ã—Ä–µ", "2. –ü—è—Ç—å", "3. –®–µ—Å—Ç—å"],
            correctAnswer: 2
        }
    ];

    let correctAnswers = 0;

    for (let i = 0; i < jobArray.length; i++) {
        const currentQuestion = jobArray[i];

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        let questionText = currentQuestion.question + "\n";
        questionText += currentQuestion.options.join("\n");

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAnswer = parseInt(prompt(questionText));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if (userAnswer === currentQuestion.correctAnswer) {
            correctAnswers++;
        }
    }

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    alert(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers} –∏–∑ ${jobArray.length}`);
}


//–ò–≥—Ä–∞ 5
function fiveGame() {

    const options = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"];

    // –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userChoice = prompt("–í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?").toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞
    if (!options.includes(userChoice)) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É!");
        return;
    }

    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const computerChoice = options[Math.floor(Math.random() * options.length)];


    let result;

    if (userChoice === computerChoice) {
        result = "–ù–∏—á—å—è!";
    } else if (
        (userChoice === "–∫–∞–º–µ–Ω—å" && computerChoice === "–Ω–æ–∂–Ω–∏—Ü—ã") ||
        (userChoice === "–Ω–æ–∂–Ω–∏—Ü—ã" && computerChoice === "–±—É–º–∞–≥–∞") ||
        (userChoice === "–±—É–º–∞–≥–∞" && computerChoice === "–∫–∞–º–µ–Ω—å")
    ) {
        result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!";
    } else {
        result = "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª!";
    }
    alert(result);
}


//–ò–≥—Ä–∞ 6

const element = document.getElementsByClassName('btn');
const button = element[6];

button.addEventListener('click', function () {
    const element1 = document.querySelector('.box');
    element1.style.backgroundColor = getRandomColor();
});

function getRandomColor() {
    let letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}
